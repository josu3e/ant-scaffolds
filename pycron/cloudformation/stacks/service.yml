Description: >
  Ejecucion de tareas programadas.

Mappings:
  RegionMap:
    eu-west-1:
      EnvRegion: "dev"
      EnvBucket: "dev.{{ product_name }}.com"
    us-west-2:
      EnvRegion: "pre"
      EnvBucket: "pre.{{ product_name }}.com"
    us-east-1:
      EnvRegion: "prod"
      EnvBucket: "{{ product_name }}.com"

Parameters:

  Image:
    Description: Image to deploy to service
    Type: String

  ServiceName:
    Description: Nombre del servicio
    Type: String

  Env:
    Description: Ambiente de despliegue
    Type: String

  Owner:
    Description: Producto al que le pertenece el servicio
    Type: String

  MemorySize:
    Description: Cantidad de memoria asignada a la instancia del contenedor
    Type: Number

Resources:

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Owner}.${Env}.${ServiceName}.ecs"
      AssumeRolePolicyDocument:
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
              - "ecs-tasks.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "${Owner}.${Env}.${ServiceName}.ecs"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - autoscaling:Describe*,
                - cloudwatch:*,
                - logs:*",
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:DeleteObject*
                - s3:GetObject*
                - s3:PutObject*
              Resource:
                - !Join ["",["arn:aws:s3:::",!FindInMap [ RegionMap, !Ref "AWS::Region", EnvBucket ],"/*"]]

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${Owner}-${Env}-${ServiceName}"
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        -
          Name: !Sub "${Owner}-${Env}-${ServiceName}"
          Essential: true
          Image: !Ref Image
          Memory: !Ref MemorySize
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${Owner}-${Env}-${ServiceName}"
              awslogs-region: !Ref AWS::Region

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${Owner}-${Env}-${ServiceName}"
      RetentionInDays: 365

  ScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Owner}.${Env}.${ServiceName}.schedule"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
              - "events.amazonaws.com"
          Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "${Owner}.${Env}.${ServiceName}.schedule"
          PolicyDocument:
            Statement:
            -
              Effect: Allow
              Action:
                - ecs:RunTask
              Resource: !Ref TaskDefinition
Outputs:

  ScheduleTD:
    Description: Task Definition
    Value: !Ref TaskDefinition

  ScheduleRole:
    Description: Role to run task
    Value: !GetAtt ScheduleRole.Arn
