#!/usr/bin/env groovy

pipeline {
  agent any
  parameters {
    booleanParam(
      name: 'REGISTRY',
      defaultValue: false,
      description: "Requiere construir o no Registry in ECR")
    booleanParam(
      name: 'CREATE_STACK',
      defaultValue: false,
      description: "Requiere construir o no el Stack")
    choice(
      name: 'MEMORY_SIZE',
      choices:"128\n256\n512\n768\n1024\n2048",
      description: "Cantidad de memoria asignada al contenedor")
    choice(
      name: 'DESIRED_COUNT',
      choices:"1\n2\n3\n4\n5\n10",
      description: "Numero ne instancias por incremento")
    text(name: 'MIN_SCALING',     defaultValue: '1',  description: 'Minimo de contenedores disponibles')
    text(name: 'MAX_SCALING',     defaultValue: '2',  description: 'Maximo de contenedores disponibles')
    text(name: 'HTTPS_PRIORITY',  defaultValue: '{{ https_priority }}', description: 'Prioridad de listener Https en el ALB: dev={{ https_priority }}')
  }
  options {
    ansiColor('xterm')
    disableConcurrentBuilds()
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('Set Enviroment') {
      steps {
        script {
          def getEnvConfig = { branch ->
            if (branch.indexOf('dev') == 0) { return ["region": "eu-west-1", "baseEnv": "dev"] }
            if (branch.indexOf('pre') == 0) { return ["region": "us-west-2", "baseEnv": "pre"] }
            if (branch.indexOf('prod') == 0) { return ["region": "us-east-1", "baseEnv": "prod"] }
          }
          ENV_CONFIG = getEnvConfig("${GIT_BRANCH}")
          enviromentArray = [
              "ENV=${GIT_BRANCH}",
              "DEPLOY_REGION=${ENV_CONFIG.region}",
              "DESIRED_COUNT=${DESIRED_COUNT}",
              "MIN_SCALING=${MIN_SCALING}",
              "MAX_SCALING=${MAX_SCALING}",
              "HTTPS_PRIORITY=${HTTPS_PRIORITY}",
              "MEMORY_SIZE=${MEMORY_SIZE}",
              "INFRA_BUCKET=infraestructura.${ENV_CONFIG.baseEnv}",
              "SLACK_CHANNEL=${OWNER}-${ENV_CONFIG.baseEnv}-changelog",
              "ECS_CLUSTER=${OWNER}-${ENV_CONFIG.baseEnv}"
          ]

          print "Set enviroments"
          print enviromentArray
        }
      }
    }
    stage('ECR') {
      steps {
        withEnv(enviromentArray){
          script {
            if ("${params.REGISTRY}" == "true") {
              sh 'make create-registry'
            }
          }
        }
      }
    }
    stage('Sync S3 Config') {
      steps {
        withEnv(enviromentArray){
            sh 'make sync-config'
        }
      }
    }
    stage('Install') {
      steps {
        withEnv(enviromentArray){
            sh 'make install'
        }
      }
    }
    stage('Sync Task Definition') {
      steps {
        withEnv(enviromentArray){
           script {
              if ("${params.CREATE_STACK}" == "true") {
                echo 'no se descargo task definition, el stack se creara con cloud formation'
              } else {
                sh 'make sync-task-definition'
              }
           }
        }
      }
    }
    stage('Sync CloudFormation Resources') {
      steps {
        withEnv(enviromentArray){
            sh 'make sync-cloudformation'
        }
      }
    }
    stage('Build') {
      steps {
        withEnv(enviromentArray){
            sh 'make build-latest'
        }
      }
    }
    stage('Publish') {
      steps {
        withEnv(enviromentArray){
            sh 'make publish'
        }
      }
    }
    stage('Test') {
      steps {
        withEnv(enviromentArray){
            sh 'make tests'
        }
      }
    }
    stage('Deploy') {
      steps {
        withEnv(enviromentArray){
            script {
                if ("${params.CREATE_STACK}" == "true") {
                    sh 'make update-service'
                } else {
                    sh 'make update-ecs'
                }
            }
        }
      }
    }
  }
  post {
    always {
      withEnv(enviromentArray){
        junit 'app/nosetests.xml'
        sh 'make chown'
      }
    }
    success {
      withEnv(enviromentArray){
        sh '''
            make slack-notify SLACK_TITLE="Deploy realizado con Ã©xito" SLACK_LINK=${JOB_URL} SLACK_TEXT="Se realizo de manera correcta el deploy del proyecto ${JOB_NAME} en la rama ${GIT_BRANCH}"
        '''
      }
    }
    failure {
      withEnv(enviromentArray){
        sh '''
            make slack-notify SLACK_TITLE="Error de deploy" SLACK_LINK=${JOB_URL} SLACK_TEXT="Se presento un problema mientras se desplegaba el proyecto ${JOB_NAME} en la rama ${GIT_BRANCH}"
        '''
      }
    }
  }
}
