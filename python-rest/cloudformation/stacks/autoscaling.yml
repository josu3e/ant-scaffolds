Description: >
  Despliegue de reglas de autoscaling.

Parameters:
  Cluster:
    Description: Task Definition que esta designado para ejecutar la tarea
    Type: String

  ServiceName:
    Description: Nombre del servicio
    Type: String

  Env:
    Description: Ambiente de despliegue
    Type: String

  Owner:
    Description: Producto al que le pertenece el servicio
    Type: String

  MaxScaling:
    Description: How many instances of this task should we scaling across our cluster?
    Type: Number

  MinScaling:
    Description: How many instances of this task should we reduce across our cluster?
    Type: Number

Resources:
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxScaling
      MinCapacity: !Ref MinScaling
      ResourceId: !Join
        - ''
        - - "service/"
          - !Ref Cluster
          - '/'
          - !Sub "${Owner}-${Env}-${ServiceName}"
      RoleARN: !GetAtt AutoscalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  HighMemoryUtilizationScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${Owner}-${Env}-${ServiceName}-HighMemoryUtilizationAlarm"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 2
        - MetricIntervalLowerBound: 10
          MetricIntervalUpperBound: 20
          ScalingAdjustment: 4
        - MetricIntervalLowerBound: 20
          ScalingAdjustment: 6

  CriticalMemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: MemoryUtilization > 95% for 1 minute
      MetricName: "MemoryUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 95
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:929226109038:Infraestructura"
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !Sub "${Owner}-${Env}-${ServiceName}"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: MemoryUtilization

  HighMemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: MemoryUtilization > 65% for 1 minute
      MetricName: "MemoryUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 65
      OkActions:
        - !Ref HighMemoryUtilizationScalingPolicy
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !Sub "${Owner}-${Env}-${ServiceName}"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: MemoryUtilization


  LowMemoryUtilizationScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${Owner}-${Env}-${ServiceName}-LowMemoryUtilizationAlarm"
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1

  LowMemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: MemoryUtilization > 30% for 15 minutes
      MetricName: "MemoryUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: 60
      EvaluationPeriods: 15
      Threshold: 30
      AlarmActions:
        - !Ref LowMemoryUtilizationScalingPolicy
        - !Sub "arn:aws:sns:${AWS::Region}:929226109038:Infraestructura"
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !Sub "${Owner}-${Env}-${ServiceName}"
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: MemoryUtilization

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Owner}.${Env}.${ServiceName}.AutoScaling"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - application-autoscaling:*
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ecs:DescribeServices
              - ecs:UpdateService
            Resource: '*'