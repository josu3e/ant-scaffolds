#!/usr/bin/env groovy

pipeline {
  agent any
  parameters {
    booleanParam(
      name: 'REGISTRY',
      defaultValue: false,
      description: "Requiere construir o no Registry in ECR")
    choice(
      name: 'MEMORY_SIZE',
      choices:"128\n256\n512\n768\n1024\n2048",
      description: "Cantidad de memoria asignada al contenedor")
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('Set Enviroment') {
      steps {
        script {
          def getEnvConfig = { branch ->
            if (branch.indexOf('dev') == 0) { return ["region": "eu-west-1", "baseEnv": "dev"] }
            if (branch.indexOf('pre') == 0) { return ["region": "us-west-2", "baseEnv": "pre"] }
            if (branch.indexOf('prod') == 0) { return ["region": "us-east-1", "baseEnv": "prod"] }
          }
          ENV_CONFIG = getEnvConfig("${GIT_BRANCH}")
          enviromentArray = [
              "ENV=${GIT_BRANCH}",
              "DEPLOY_REGION=${ENV_CONFIG.region}",
              "MEMORY_SIZE=$MEMORY_SIZE",
              "INFRA_BUCKET=infraestructura.${ENV_CONFIG.baseEnv}",
              "SLACK_CHANNEL={{ owner }}-${ENV_CONFIG.baseEnv}-changelog",
          ]

          print "Set enviroments"
          print enviromentArray
        }
      }
    }
    stage('ECR') {
      steps {
        withEnv(enviromentArray){
          script {
            if ("${params.REGISTRY}" == "true") {
              sh 'make create-registry'
            }
          }
        }
      }
    }
    stage('Install') {
      steps {
        withEnv(enviromentArray){
          sh 'make install'
        }
      }
    }
    stage('Build') {
      steps {
        withEnv(enviromentArray){
          sh 'make build-latest'
        }
      }
    }
    stage('Publish') {
      steps {
        withEnv(enviromentArray){
          sh 'make publish'
        }
      }
    }
    stage('Deploy') {
      steps {
        withEnv(enviromentArray){
          sh 'make update-service'
        }
      }
    }
  }
}
